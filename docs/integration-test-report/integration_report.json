{
  "stats": {
    "suites": 6,
    "tests": 23,
    "passes": 21,
    "pending": 2,
    "failures": 0,
    "start": "2025-10-15T15:04:06.393Z",
    "end": "2025-10-15T15:04:29.999Z",
    "duration": 23606,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 8.695652173913043,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "14e53133-c3f9-4384-a041-991314079e5a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9848fdd0-f21f-4bbe-9fb3-19883ee506b9",
          "title": "📎 Attachment API Integration Tests",
          "fullFile": "D:\\Codingan\\JavaScript\\ExpressJS\\backend-task-api\\tests\\integration\\attachment.integration.test.js",
          "file": "\\tests\\integration\\attachment.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"📎 Attachment API Integration Tests\"",
              "fullTitle": "📎 Attachment API Integration Tests \"before all\" hook in \"📎 Attachment API Integration Tests\"",
              "timedOut": false,
              "duration": 1389,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('🔧 Setting up test environment...')\n// Setup files\nif (!fs.existsSync('assets')) fs.mkdirSync('assets')\nif (!fs.existsSync(pdfPath)) {\n    fs.writeFileSync(\n        pdfPath,\n        '%PDF-1.4\\n1 0 obj\\n<< /Type /Catalog >>\\nendobj\\ntrailer\\n<< /Root 1 0 R >>\\n%%EOF'\n    )\n}\nif (!fs.existsSync(txtPath)) {\n    fs.writeFileSync(txtPath, 'Invalid text file content')\n}\n// Clean database\nawait prisma.$transaction([\n    prisma.attachment.deleteMany(),\n    prisma.task.deleteMany(),\n    prisma.refreshToken.deleteMany(),\n    prisma.user.deleteMany(),\n])\n// Create users\nadminUser = await prisma.user.create({\n    data: {\n        name: 'Admin Attachment',\n        email: 'admin-upload@test.com',\n        password: 'hashedpassword',\n        role: 'ADMIN',\n    },\n})\nassignedUser = await prisma.user.create({\n    data: {\n        name: 'User Assigned',\n        email: 'user-upload@test.com',\n        password: 'hashedpassword',\n        role: 'USER',\n    },\n})\n// Create refresh tokens for session validation\nawait prisma.refreshToken.create({\n    data: {\n        user_id: adminUser.id,\n        token: 'fake-refresh-token-admin-' + Date.now(),\n        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n    },\n})\nawait prisma.refreshToken.create({\n    data: {\n        user_id: assignedUser.id,\n        token: 'fake-refresh-token-user-' + Date.now(),\n        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n    },\n})\n// Create task\ntask = await prisma.task.create({\n    data: {\n        title: 'Integration Upload Test',\n        description: 'Testing file upload endpoint',\n        status: 'TODO',\n        priority: 'HIGH',\n        due_date: new Date(Date.now() + 86400000),\n        created_by_id: adminUser.id,\n        assigned_to_id: assignedUser.id,\n    },\n})\n// Generate tokens\nadminToken = generateAccessToken({\n    userId: adminUser.id,\n    role: adminUser.role,\n})\nuserToken = generateAccessToken({\n    userId: assignedUser.id,\n    role: assignedUser.role,\n})\nconsole.log('✅ Setup completed')",
              "err": {},
              "uuid": "976fc741-e03b-492d-ae2c-3e0916ad59d5",
              "parentUUID": "9848fdd0-f21f-4bbe-9fb3-19883ee506b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"📎 Attachment API Integration Tests\"",
              "fullTitle": "📎 Attachment API Integration Tests \"after all\" hook in \"📎 Attachment API Integration Tests\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.$disconnect()",
              "err": {},
              "uuid": "9a7a6323-0f9d-4114-b8b2-6dcbdf4b7986",
              "parentUUID": "9848fdd0-f21f-4bbe-9fb3-19883ee506b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "0ad4cb92-1509-40b7-ac43-a0a4c6a55651",
              "title": "Upload Operations",
              "fullFile": "D:\\Codingan\\JavaScript\\ExpressJS\\backend-task-api\\tests\\integration\\attachment.integration.test.js",
              "file": "\\tests\\integration\\attachment.integration.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "✅ Should upload PDF file successfully",
                  "fullTitle": "📎 Attachment API Integration Tests Upload Operations ✅ Should upload PDF file successfully",
                  "timedOut": false,
                  "duration": 2413,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Reset task status to TODO first\nawait prisma.task.update({\n    where: { id: task.id },\n    data: { status: 'TODO' },\n})\nconst res = await request(app)\n    .post(`/api/tasks/${task.id}/attachments`)\n    .set('Authorization', `Bearer ${userToken}`)\n    .attach('file', pdfPath, {\n        filename: 'sample.pdf',\n        contentType: 'application/pdf',\n    })\nexpect(res.status).to.equal(201)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body.message).to.match(/uploaded/i)",
                  "err": {},
                  "uuid": "90b23eca-d3f3-42cd-b1a9-37e1d4a5922a",
                  "parentUUID": "0ad4cb92-1509-40b7-ac43-a0a4c6a55651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "🚫 Should reject non-PDF/Image files",
                  "fullTitle": "📎 Attachment API Integration Tests Upload Operations 🚫 Should reject non-PDF/Image files",
                  "timedOut": false,
                  "duration": 77,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "// ✅ Ganti arrow function jadi regular function\n// Reset task status to TODO first\nawait prisma.task.update({\n    where: { id: task.id },\n    data: { status: 'TODO' },\n})\ntry {\n    const res = await request(app)\n        .post(`/api/tasks/${task.id}/attachments`)\n        .set('Authorization', `Bearer ${userToken}`)\n        .attach('file', txtPath, {\n            filename: 'sample.txt',\n            contentType: 'text/plain',\n        })\n    // Bisa return 400 atau 500 tergantung implementasi\n    expect(res.status).to.be.oneOf([400, 500])\n    expect(res.body).to.have.property('success', false)\n} catch (error) {\n    // Handle ECONNRESET error gracefully\n    if (error.code === 'ECONNRESET') {\n        console.log(\n            '⚠️  Connection reset during invalid file test - this is expected for some file validation implementations'\n        )\n        this.skip() // ✅ Sekarang this.skip() akan bekerja\n    } else {\n        throw error\n    }\n}",
                  "err": {},
                  "uuid": "f6a1d050-b95a-4f0b-8713-8225d147e479",
                  "parentUUID": "0ad4cb92-1509-40b7-ac43-a0a4c6a55651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "🚫 Should forbid upload for unauthorized user",
                  "fullTitle": "📎 Attachment API Integration Tests Upload Operations 🚫 Should forbid upload for unauthorized user",
                  "timedOut": false,
                  "duration": 400,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stranger = await prisma.user.create({\n    data: {\n        name: 'Stranger Upload',\n        email: 'stranger-upload@test.com',\n        password: 'hashedpassword',\n        role: 'USER',\n    },\n})\n// Create refresh token for stranger\nawait prisma.refreshToken.create({\n    data: {\n        user_id: stranger.id,\n        token: 'fake-refresh-token-stranger-' + Date.now(),\n        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n    },\n})\nconst strangerToken = generateAccessToken({\n    userId: stranger.id,\n    role: stranger.role,\n})\nconst res = await request(app)\n    .post(`/api/tasks/${task.id}/attachments`)\n    .set('Authorization', `Bearer ${strangerToken}`)\n    .attach('file', pdfPath)\nexpect(res.status).to.equal(403)\nexpect(res.body).to.have.property('success', false)\nexpect(res.body.message).to.match(/not allowed/i)",
                  "err": {},
                  "uuid": "b9d31471-a4eb-4986-9a33-8dceb5284ea1",
                  "parentUUID": "0ad4cb92-1509-40b7-ac43-a0a4c6a55651",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90b23eca-d3f3-42cd-b1a9-37e1d4a5922a",
                "b9d31471-a4eb-4986-9a33-8dceb5284ea1"
              ],
              "failures": [],
              "pending": [
                "f6a1d050-b95a-4f0b-8713-8225d147e479"
              ],
              "skipped": [],
              "duration": 2890,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "d7a40a9e-2f63-4fd0-87a9-c6269f47aeb2",
              "title": "Delete Operations",
              "fullFile": "D:\\Codingan\\JavaScript\\ExpressJS\\backend-task-api\\tests\\integration\\attachment.integration.test.js",
              "file": "\\tests\\integration\\attachment.integration.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "✅ Should delete attachment successfully by admin",
                  "fullTitle": "📎 Attachment API Integration Tests Delete Operations ✅ Should delete attachment successfully by admin",
                  "timedOut": false,
                  "duration": 4198,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Reset task status\nawait prisma.task.update({\n    where: { id: task.id },\n    data: { status: 'TODO' },\n})\n// Upload a file first\nconst uploadRes = await request(app)\n    .post(`/api/tasks/${task.id}/attachments`)\n    .set('Authorization', `Bearer ${userToken}`)\n    .attach('file', pdfPath)\nif (\n    uploadRes.status === 201 &&\n    uploadRes.body.data?.data?.attachment?.id\n) {\n    const attachmentId = uploadRes.body.data.data.attachment.id\n    // Delete it as admin\n    const deleteRes = await request(app)\n        .delete(`/api/attachments/${attachmentId}`)\n        .set('Authorization', `Bearer ${adminToken}`)\n    expect(deleteRes.status).to.equal(200)\n    expect(deleteRes.body).to.have.property('success', true)\n    expect(deleteRes.body.message).to.match(/deleted/i)\n}",
                  "err": {},
                  "uuid": "e8e30a0b-39c6-4074-ae82-376ce42c95ae",
                  "parentUUID": "d7a40a9e-2f63-4fd0-87a9-c6269f47aeb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "✅ Should delete attachment successfully by uploader",
                  "fullTitle": "📎 Attachment API Integration Tests Delete Operations ✅ Should delete attachment successfully by uploader",
                  "timedOut": false,
                  "duration": 3112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Reset task status\nawait prisma.task.update({\n    where: { id: task.id },\n    data: { status: 'TODO' },\n})\n// Upload a file\nconst uploadRes = await request(app)\n    .post(`/api/tasks/${task.id}/attachments`)\n    .set('Authorization', `Bearer ${userToken}`)\n    .attach('file', pdfPath)\nif (\n    uploadRes.status === 201 &&\n    uploadRes.body.data?.data?.attachment?.id\n) {\n    const attachmentId = uploadRes.body.data.data.attachment.id\n    // Delete with same user (uploader)\n    const deleteRes = await request(app)\n        .delete(`/api/attachments/${attachmentId}`)\n        .set('Authorization', `Bearer ${userToken}`)\n    expect(deleteRes.status).to.equal(200)\n    expect(deleteRes.body).to.have.property('success', true)\n}",
                  "err": {},
                  "uuid": "bf54d840-6527-4569-9f13-3e7d93e65d1d",
                  "parentUUID": "d7a40a9e-2f63-4fd0-87a9-c6269f47aeb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "🚫 Should forbid delete by unauthorized user",
                  "fullTitle": "📎 Attachment API Integration Tests Delete Operations 🚫 Should forbid delete by unauthorized user",
                  "timedOut": false,
                  "duration": 2832,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Reset task status\nawait prisma.task.update({\n    where: { id: task.id },\n    data: { status: 'TODO' },\n})\n// Upload a file\nconst uploadRes = await request(app)\n    .post(`/api/tasks/${task.id}/attachments`)\n    .set('Authorization', `Bearer ${userToken}`)\n    .attach('file', pdfPath)\nif (\n    uploadRes.status === 201 &&\n    uploadRes.body.data?.data?.attachment?.id\n) {\n    const attachmentId = uploadRes.body.data.data.attachment.id\n    // Create unauthorized user\n    const stranger = await prisma.user.create({\n        data: {\n            name: 'Stranger Delete',\n            email: 'stranger-delete@test.com',\n            password: 'hashedpassword',\n            role: 'USER',\n        },\n    })\n    // Create refresh token for stranger\n    await prisma.refreshToken.create({\n        data: {\n            user_id: stranger.id,\n            token:\n                'fake-refresh-token-stranger-delete-' + Date.now(),\n            expires_at: new Date(\n                Date.now() + 7 * 24 * 60 * 60 * 1000\n            ),\n        },\n    })\n    const strangerToken = generateAccessToken({\n        userId: stranger.id,\n        role: stranger.role,\n    })\n    // Try to delete with unauthorized user\n    const deleteRes = await request(app)\n        .delete(`/api/attachments/${attachmentId}`)\n        .set('Authorization', `Bearer ${strangerToken}`)\n    expect(deleteRes.status).to.equal(403)\n    expect(deleteRes.body).to.have.property('success', false)\n}",
                  "err": {},
                  "uuid": "0f199743-a19c-4f86-af3c-fa0f29145d99",
                  "parentUUID": "d7a40a9e-2f63-4fd0-87a9-c6269f47aeb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "🚫 Should return 404 for non-existent attachment",
                  "fullTitle": "📎 Attachment API Integration Tests Delete Operations 🚫 Should return 404 for non-existent attachment",
                  "timedOut": false,
                  "duration": 200,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n    .delete('/api/attachments/non-existent-id-123')\n    .set('Authorization', `Bearer ${adminToken}`)\nexpect(res.status).to.equal(404)\nexpect(res.body).to.have.property('success', false)",
                  "err": {},
                  "uuid": "6443278e-3304-454b-b706-6e1c3a540bb4",
                  "parentUUID": "d7a40a9e-2f63-4fd0-87a9-c6269f47aeb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8e30a0b-39c6-4074-ae82-376ce42c95ae",
                "bf54d840-6527-4569-9f13-3e7d93e65d1d",
                "0f199743-a19c-4f86-af3c-fa0f29145d99",
                "6443278e-3304-454b-b706-6e1c3a540bb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10342,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "812c328a-584b-4686-875a-00ae1de7bf4e",
              "title": "Get Operations",
              "fullFile": "D:\\Codingan\\JavaScript\\ExpressJS\\backend-task-api\\tests\\integration\\attachment.integration.test.js",
              "file": "\\tests\\integration\\attachment.integration.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "✅ Should get attachments for a task",
                  "fullTitle": "📎 Attachment API Integration Tests Get Operations ✅ Should get attachments for a task",
                  "timedOut": false,
                  "duration": 2477,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "// ✅ Ganti arrow function jadi regular function\n// Upload a file first to ensure there's data\nawait request(app)\n    .post(`/api/tasks/${task.id}/attachments`)\n    .set('Authorization', `Bearer ${userToken}`)\n    .attach('file', pdfPath)\nconst res = await request(app)\n    .get(`/api/tasks/${task.id}/attachments`)\n    .set('Authorization', `Bearer ${userToken}`)\n// Bisa return 200 atau 404 jika endpoint tidak ada\nif (res.status === 200) {\n    expect(res.body).to.have.property('success', true)\n    expect(res.body.data).to.have.property('attachments')\n    expect(res.body.data.attachments).to.be.an('array')\n} else if (res.status === 404) {\n    console.log(\n        '⚠️  GET /api/tasks/:id/attachments endpoint not found'\n    )\n    // Skip test jika endpoint tidak ada\n    this.skip() // ✅ Sekarang this.skip() akan bekerja\n} else {\n    expect(res.status).to.equal(200)\n}",
                  "err": {},
                  "uuid": "c3dbf9bd-5000-4b68-974b-0373fea13e8d",
                  "parentUUID": "812c328a-584b-4686-875a-00ae1de7bf4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "🚫 Should forbid get attachments for unauthorized user",
                  "fullTitle": "📎 Attachment API Integration Tests Get Operations 🚫 Should forbid get attachments for unauthorized user",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stranger = await prisma.user.create({\n    data: {\n        name: 'Stranger Get',\n        email: 'stranger-get@test.com',\n        password: 'hashedpassword',\n        role: 'USER',\n    },\n})\n// Create refresh token for stranger\nawait prisma.refreshToken.create({\n    data: {\n        user_id: stranger.id,\n        token: 'fake-refresh-token-stranger-get-' + Date.now(),\n        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n    },\n})\nconst strangerToken = generateAccessToken({\n    userId: stranger.id,\n    role: stranger.role,\n})\nconst res = await request(app)\n    .get(`/api/tasks/${task.id}/attachments`)\n    .set('Authorization', `Bearer ${strangerToken}`)\n// Bisa 403 atau 404\nexpect(res.status).to.be.oneOf([403, 404])\nif (res.status === 403) {\n    expect(res.body).to.have.property('success', false)\n}",
                  "err": {},
                  "uuid": "a5f17ffe-9623-4e5e-8154-7397c6cf8f01",
                  "parentUUID": "812c328a-584b-4686-875a-00ae1de7bf4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5f17ffe-9623-4e5e-8154-7397c6cf8f01"
              ],
              "failures": [],
              "pending": [
                "c3dbf9bd-5000-4b68-974b-0373fea13e8d"
              ],
              "skipped": [],
              "duration": 2644,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "2abad109-1bfa-41ed-9341-883c505cca98",
          "title": "🔐 Auth Integration Tests (Mocha + Chai)",
          "fullFile": "D:\\Codingan\\JavaScript\\ExpressJS\\backend-task-api\\tests\\integration\\auth.integration.test.js",
          "file": "\\tests\\integration\\auth.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"🔐 Auth Integration Tests (Mocha + Chai)\"",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) \"before all\" hook in \"🔐 Auth Integration Tests (Mocha + Chai)\"",
              "timedOut": false,
              "duration": 875,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.$transaction([\n    prisma.refreshToken.deleteMany(),\n    prisma.user.deleteMany(),\n])",
              "err": {},
              "uuid": "9e8e9b83-a711-4ef8-8ea0-ffb1c46d7cbf",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"🔐 Auth Integration Tests (Mocha + Chai)\"",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) \"after all\" hook in \"🔐 Auth Integration Tests (Mocha + Chai)\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.$disconnect()",
              "err": {},
              "uuid": "58daa2cd-bc12-4199-9f49-94df179e5676",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "✅ POST /api/auth/register - should register a new user",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) ✅ POST /api/auth/register - should register a new user",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/api/auth/register').send(userData)\nexpect(res.status).to.equal(201)\nexpect(res.body).to.have.property(\n    'message',\n    'User created successfully'\n)\nexpect(res.body.user).to.have.property('email', userData.email)",
              "err": {},
              "uuid": "0561aa27-cf0c-49b3-9ec2-d7803cc84452",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ POST /api/auth/register - should fail if email already exists",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) ❌ POST /api/auth/register - should fail if email already exists",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/api/auth/register').send(userData)\nexpect(res.status).to.equal(409)\nexpect(res.body.message).to.contain('already in use')",
              "err": {},
              "uuid": "6b83271a-4ddc-49e2-8186-395d5f018274",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✅ POST /api/auth/login - should login successfully",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) ✅ POST /api/auth/login - should login successfully",
              "timedOut": false,
              "duration": 247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/auth/login')\n    .send({ email: userData.email, password: userData.password })\nexpect(res.status).to.equal(200)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body.data).to.have.property('accessToken')\nexpect(res.body.data).to.have.property('refreshToken')",
              "err": {},
              "uuid": "2072205d-fd63-4eff-bdd5-729c76cf2588",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ POST /api/auth/login - should fail with invalid password",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) ❌ POST /api/auth/login - should fail with invalid password",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/auth/login')\n    .send({ email: userData.email, password: 'wrongpass' })\nexpect(res.status).to.equal(401)\nexpect(res.body.message).to.contain('Invalid email or password')",
              "err": {},
              "uuid": "3990a204-b252-488b-a74b-cb2b12da1368",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✅ POST /api/auth/refresh-token - should refresh access token",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) ✅ POST /api/auth/refresh-token - should refresh access token",
              "timedOut": false,
              "duration": 395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Login dulu untuk mendapatkan refresh token baru\nconst loginRes = await request(app)\n    .post('/api/auth/login')\n    .send({ email: userData.email, password: userData.password })\nconst refreshToken = loginRes.body.data.refreshToken\nconst res = await request(app)\n    .post('/api/auth/refresh-token')\n    .send({ refreshToken })\nexpect(res.status).to.equal(200)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body.data).to.have.property('accessToken')",
              "err": {},
              "uuid": "cc0a0028-5b43-4338-81a8-dec86a93838c",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ POST /api/auth/refresh-token - should fail with invalid token",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) ❌ POST /api/auth/refresh-token - should fail with invalid token",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/auth/refresh-token')\n    .send({ refreshToken: 'invalidtoken123' })\nexpect(res.status).to.equal(401)\nexpect(res.body.message).to.contain('Invalid refresh token')",
              "err": {},
              "uuid": "2bc697c6-3823-4cd2-9a48-47df2ede3442",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✅ POST /api/auth/logout - should logout successfully",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) ✅ POST /api/auth/logout - should logout successfully",
              "timedOut": false,
              "duration": 310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Login dulu untuk mendapatkan token baru yang fresh\nconst loginRes = await request(app)\n    .post('/api/auth/login')\n    .send({ email: userData.email, password: userData.password })\nconst accessToken = loginRes.body.data.accessToken\nconsole.log('Access Token untuk logout:', accessToken) // Debug\nconst res = await request(app)\n    .post('/api/auth/logout')\n    .set('Authorization', `Bearer ${accessToken}`)\nconsole.log('Logout response status:', res.status) // Debug\nconsole.log('Logout response body:', res.body) // Debug\nexpect(res.status).to.equal(200)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body).to.have.property('message', 'Logout successful')",
              "err": {},
              "uuid": "a332b099-092b-4995-abbd-022a205879e6",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ POST /api/auth/logout - should fail if no token provided",
              "fullTitle": "🔐 Auth Integration Tests (Mocha + Chai) ❌ POST /api/auth/logout - should fail if no token provided",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/api/auth/logout')\nexpect(res.status).to.equal(401)\nexpect(res.body.message).to.contain('Access denied')",
              "err": {},
              "uuid": "33dfba98-ebea-45d6-a9e9-93bc9bbdc2ae",
              "parentUUID": "2abad109-1bfa-41ed-9341-883c505cca98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0561aa27-cf0c-49b3-9ec2-d7803cc84452",
            "6b83271a-4ddc-49e2-8186-395d5f018274",
            "2072205d-fd63-4eff-bdd5-729c76cf2588",
            "3990a204-b252-488b-a74b-cb2b12da1368",
            "cc0a0028-5b43-4338-81a8-dec86a93838c",
            "2bc697c6-3823-4cd2-9a48-47df2ede3442",
            "a332b099-092b-4995-abbd-022a205879e6",
            "33dfba98-ebea-45d6-a9e9-93bc9bbdc2ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1603,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
          "title": "🧩 Task Integration Tests (Mocha + Chai)",
          "fullFile": "D:\\Codingan\\JavaScript\\ExpressJS\\backend-task-api\\tests\\integration\\task.integration.test.js",
          "file": "\\tests\\integration\\task.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"🧩 Task Integration Tests (Mocha + Chai)\"",
              "fullTitle": "🧩 Task Integration Tests (Mocha + Chai) \"before all\" hook in \"🧩 Task Integration Tests (Mocha + Chai)\"",
              "timedOut": false,
              "duration": 1684,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('🧹 Cleaning database...')\n// Hapus data lama secara aman (hindari FK error)\nawait prisma.attachment.deleteMany()\nawait prisma.task.deleteMany()\nawait prisma.refreshToken.deleteMany()\nawait prisma.user.deleteMany()\n// 🔐 Register Admin\nconsole.log('🧑‍💼 Registering ADMIN...')\nawait request(app).post('/api/auth/register').send({\n    name: 'Admin Tester',\n    email: 'admin@example.com',\n    password: 'password123',\n    role: 'ADMIN',\n})\n// 🔑 Login Admin\nconst adminLogin = await request(app).post('/api/auth/login').send({\n    email: 'admin@example.com',\n    password: 'password123',\n})\nadminToken =\n    adminLogin.body.accessToken ||\n    adminLogin.body.data?.accessToken ||\n    adminLogin.body.token ||\n    null\nif (!adminToken) {\n    console.error('❌ Admin login response:', adminLogin.body)\n    throw new Error('❌ Admin token not generated')\n}\n// 👤 Register User\nconsole.log('👤 Registering USER...')\nawait request(app).post('/api/auth/register').send({\n    name: 'User Tester',\n    email: 'user@example.com',\n    password: 'password123',\n    role: 'USER',\n})\n// 🔑 Login User\nconst userLogin = await request(app).post('/api/auth/login').send({\n    email: 'user@example.com',\n    password: 'password123',\n})\nuserToken =\n    userLogin.body.accessToken ||\n    userLogin.body.data?.accessToken ||\n    userLogin.body.token ||\n    null\nif (!userToken) {\n    console.error('❌ User login response:', userLogin.body)\n    throw new Error('❌ User token not generated')\n}\nconsole.log('✅ Setup complete!')",
              "err": {},
              "uuid": "c999459f-c3c0-46b8-a999-25dd23fecc95",
              "parentUUID": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"🧩 Task Integration Tests (Mocha + Chai)\"",
              "fullTitle": "🧩 Task Integration Tests (Mocha + Chai) \"after all\" hook in \"🧩 Task Integration Tests (Mocha + Chai)\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prisma.$disconnect()",
              "err": {},
              "uuid": "1851fc24-29ff-4efc-9d60-15a08d83127f",
              "parentUUID": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "✅ POST /api/tasks - should create a new task (ADMIN only)",
              "fullTitle": "🧩 Task Integration Tests (Mocha + Chai) ✅ POST /api/tasks - should create a new task (ADMIN only)",
              "timedOut": false,
              "duration": 751,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/tasks')\n    .set('Authorization', `Bearer ${adminToken}`)\n    .send({\n        title: 'Integration Test Task',\n        description: 'Task created for integration testing',\n        due_date: new Date(Date.now() + 86400000),\n        priority: 'HIGH',\n    })\nconsole.log('🧩 CREATE TASK RESPONSE:', res.body)\nexpect(res.statusCode).to.equal(201)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body).to.have.property(\n    'message',\n    'Task created successfully'\n)\n// ✅ fix nested data (karena ada 3 level)\nexpect(res.body.data.data).to.have.property(\n    'title',\n    'Integration Test Task'\n)\ncreatedTask = res.body.data.data",
              "err": {},
              "uuid": "57001300-d073-446d-926f-9658e35f8f3b",
              "parentUUID": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "📋 GET /api/tasks - should return all tasks",
              "fullTitle": "🧩 Task Integration Tests (Mocha + Chai) 📋 GET /api/tasks - should return all tasks",
              "timedOut": false,
              "duration": 350,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get('/api/tasks')\n    .set('Authorization', `Bearer ${adminToken}`)\nexpect(res.statusCode).to.equal(200)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body.data).to.be.an('array')\nexpect(res.body.data.length).to.be.greaterThan(0)",
              "err": {},
              "uuid": "d66cb040-50ff-402c-a63a-35383caa3e9b",
              "parentUUID": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "🔍 GET /api/tasks/:id - should return task by ID",
              "fullTitle": "🧩 Task Integration Tests (Mocha + Chai) 🔍 GET /api/tasks/:id - should return task by ID",
              "timedOut": false,
              "duration": 377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!createdTask) throw new Error('❌ createdTask not set')\nconst res = await request(app)\n    .get(`/api/tasks/${createdTask.id}`)\n    .set('Authorization', `Bearer ${adminToken}`)\nexpect(res.statusCode).to.equal(200)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body.data).to.have.property('id', createdTask.id)",
              "err": {},
              "uuid": "c5d1e068-dd01-44f6-8a02-9455df3f9a58",
              "parentUUID": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✏️ PATCH /api/tasks/:id - should update task (ADMIN)",
              "fullTitle": "🧩 Task Integration Tests (Mocha + Chai) ✏️ PATCH /api/tasks/:id - should update task (ADMIN)",
              "timedOut": false,
              "duration": 336,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!createdTask) throw new Error('❌ createdTask not set')\nconst res = await request(app)\n    .patch(`/api/tasks/${createdTask.id}`)\n    .set('Authorization', `Bearer ${adminToken}`)\n    .send({\n        title: 'Updated Integration Task',\n        priority: 'LOW',\n    })\nexpect(res.statusCode).to.equal(200)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body.data).to.have.property(\n    'title',\n    'Updated Integration Task'\n)",
              "err": {},
              "uuid": "3728d979-d518-4a3e-9f8b-4fd4c4848705",
              "parentUUID": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "🚫 DELETE /api/tasks/:id - should forbid deletion by USER",
              "fullTitle": "🧩 Task Integration Tests (Mocha + Chai) 🚫 DELETE /api/tasks/:id - should forbid deletion by USER",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!createdTask) throw new Error('❌ createdTask not set')\nconst res = await request(app)\n    .delete(`/api/tasks/${createdTask.id}`)\n    .set('Authorization', `Bearer ${userToken}`)\nexpect(res.statusCode).to.equal(403)\nexpect(res.body.message).to.match(/Access denied/i)",
              "err": {},
              "uuid": "c3756dbe-6322-4823-a0f9-e89eff87ed06",
              "parentUUID": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "🗑️ DELETE /api/tasks/:id - should delete task successfully (ADMIN)",
              "fullTitle": "🧩 Task Integration Tests (Mocha + Chai) 🗑️ DELETE /api/tasks/:id - should delete task successfully (ADMIN)",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (!createdTask) throw new Error('❌ createdTask not set')\nconst res = await request(app)\n    .delete(`/api/tasks/${createdTask.id}`)\n    .set('Authorization', `Bearer ${adminToken}`)\nexpect(res.statusCode).to.equal(200)\nexpect(res.body).to.have.property('success', true)\nexpect(res.body).to.have.property(\n    'message',\n    'Task deleted successfully'\n)",
              "err": {},
              "uuid": "f84a01bd-a0b0-4d36-a148-eac601678f72",
              "parentUUID": "95dc5b62-6e7d-41af-a682-9dd572791d9b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "57001300-d073-446d-926f-9658e35f8f3b",
            "d66cb040-50ff-402c-a63a-35383caa3e9b",
            "c5d1e068-dd01-44f6-8a02-9455df3f9a58",
            "3728d979-d518-4a3e-9f8b-4fd4c4848705",
            "c3756dbe-6322-4823-a0f9-e89eff87ed06",
            "f84a01bd-a0b0-4d36-a148-eac601678f72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "integration_report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome",
        "reportFilename": "integration_report",
        "json": "true"
      },
      "version": "6.3.0"
    }
  }
}