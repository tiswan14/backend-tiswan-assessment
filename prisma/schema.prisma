generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum Role {
  ADMIN
  MANAGER
  USER
}

// Enum for task status
enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

// Enum for task priority
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id         String   @id @default(cuid())
  name       String?
  email      String   @unique
  password   String
  role       Role     @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  created_tasks  Task[]         @relation("CreatedTasks")
  assigned_tasks Task[]         @relation("AssignedTasks")
  refresh_tokens RefreshToken[]
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  due_date    DateTime

  created_by     User    @relation("CreatedTasks", fields: [created_by_id], references: [id])
  created_by_id  String
  assigned_to    User?   @relation("AssignedTasks", fields: [assigned_to_id], references: [id])
  assigned_to_id String?

  attachments Attachment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([created_by_id])
  @@index([assigned_to_id])
}

model Attachment {
  id          String   @id @default(cuid())
  task        Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)
  task_id     String
  file_name   String
  file_url    String
  mime_type   String
  uploaded_at DateTime @default(now())
}

model RefreshToken {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  token      String
  expires_at DateTime
}
